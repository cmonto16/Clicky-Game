{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/chelsealong/uofu/Clicky-Game/src/index.js\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nvar $root = document.querySelector(\"#root\");\nvar score;\nvar targetScore;\n\nvar makeGuess = function makeGuess() {\n  var $score = document.querySelector(\"#root p\");\n  $score.textContent = \"Score: \" + score + \" | \" + \"Target: \" + targetScore;\n\n  if (score > targetScore) {\n    alert(\"You lost this round!\");\n    playRound();\n  } else if (score === targetScore) {\n    alert(\"You won this round!\");\n    playRound();\n  }\n};\n\nthis.element.addEventListener(\"click\", function () {\n  score += _this.value;\n  makeGuess();\n}, false);\n\nvar playRound = function playRound() {\n  var fragment = document.createDocumentFragment();\n  var $score = document.createElement(\"p\");\n  targetScore = Math.floor(Math.random() * 50) + 25;\n  score = 0;\n  $score.textContent = \"Score: \" + score + \" | \" + \"Target: \" + targetScore;\n  crystals.sort(function () {\n    return 0.5 - Math.random();\n  }).forEach(function (crystal) {\n    return crystal.render(fragment);\n  });\n  fragment.appendChild($score);\n  $root.innerHTML = \"\";\n  $root.appendChild(fragment);\n};\n\nplayRound();\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51\n  },\n  __self: this\n}), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/chelsealong/uofu/Clicky-Game/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","$root","document","querySelector","score","targetScore","makeGuess","$score","textContent","alert","playRound","element","addEventListener","value","fragment","createDocumentFragment","createElement","Math","floor","random","crystals","sort","forEach","crystal","render","appendChild","innerHTML","getElementById","unregister"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,IAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AAEA,IAAIC,KAAJ;AACA,IAAIC,WAAJ;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,MAAMC,MAAM,GAAGL,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAf;AACAI,EAAAA,MAAM,CAACC,WAAP,GAAqB,YAAYJ,KAAZ,GAAoB,KAApB,GAA4B,UAA5B,GAAyCC,WAA9D;;AAEA,MAAID,KAAK,GAAGC,WAAZ,EAAyB;AACvBI,IAAAA,KAAK,CAAC,sBAAD,CAAL;AACAC,IAAAA,SAAS;AACV,GAHD,MAGO,IAAIN,KAAK,KAAKC,WAAd,EAA2B;AAChCI,IAAAA,KAAK,CAAC,qBAAD,CAAL;AACAC,IAAAA,SAAS;AACV;AACF,CAXD;;AAaA,KAAKC,OAAL,CAAaC,gBAAb,CACI,OADJ,EAEI,YAAM;AACJR,EAAAA,KAAK,IAAI,KAAI,CAACS,KAAd;AACAP,EAAAA,SAAS;AACV,CALL,EAMI,KANJ;;AASA,IAAMI,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,MAAMI,QAAQ,GAAGZ,QAAQ,CAACa,sBAAT,EAAjB;AACA,MAAMR,MAAM,GAAGL,QAAQ,CAACc,aAAT,CAAuB,GAAvB,CAAf;AACAX,EAAAA,WAAW,GAAGY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,EAA/C;AACAf,EAAAA,KAAK,GAAG,CAAR;AACAG,EAAAA,MAAM,CAACC,WAAP,GAAqB,YAAYJ,KAAZ,GAAoB,KAApB,GAA4B,UAA5B,GAAyCC,WAA9D;AACAe,EAAAA,QAAQ,CACLC,IADH,CACQ;AAAA,WAAM,MAAMJ,IAAI,CAACE,MAAL,EAAZ;AAAA,GADR,EAEGG,OAFH,CAEW,UAAAC,OAAO;AAAA,WAAIA,OAAO,CAACC,MAAR,CAAeV,QAAf,CAAJ;AAAA,GAFlB;AAGAA,EAAAA,QAAQ,CAACW,WAAT,CAAqBlB,MAArB;AACAN,EAAAA,KAAK,CAACyB,SAAN,GAAkB,EAAlB;AACAzB,EAAAA,KAAK,CAACwB,WAAN,CAAkBX,QAAlB;AACD,CAZH;;AAcEJ,SAAS;AAGXZ,QAAQ,CAAC0B,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBtB,QAAQ,CAACyB,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACA3B,aAAa,CAAC4B,UAAd","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst $root = document.querySelector(\"#root\");\n\nlet score;\nlet targetScore;\n\nconst makeGuess = () => {\n  const $score = document.querySelector(\"#root p\");\n  $score.textContent = \"Score: \" + score + \" | \" + \"Target: \" + targetScore;\n\n  if (score > targetScore) {\n    alert(\"You lost this round!\");\n    playRound();\n  } else if (score === targetScore) {\n    alert(\"You won this round!\");\n    playRound();\n  }\n};\n\nthis.element.addEventListener(\n    \"click\",\n    () => {\n      score += this.value;\n      makeGuess();\n    },\n    false\n  );\n\nconst playRound = () => {\n    const fragment = document.createDocumentFragment();\n    const $score = document.createElement(\"p\");\n    targetScore = Math.floor(Math.random() * 50) + 25;\n    score = 0;\n    $score.textContent = \"Score: \" + score + \" | \" + \"Target: \" + targetScore;\n    crystals\n      .sort(() => 0.5 - Math.random())\n      .forEach(crystal => crystal.render(fragment));\n    fragment.appendChild($score);\n    $root.innerHTML = \"\";\n    $root.appendChild(fragment);\n  };\n  \n  playRound();\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}