{"version":3,"sources":["components/Navbar.js","components/Title.js","components/Footer.js","components/ImageGrid.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","score","topScore","Title","Footer","ImageGrid","createTable","images","handleClick","containerChildren","rowChildren","i","length","push","Col","key","Image","onClick","width","src","thumbnail","Row","Container","this","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","clicked","bind","assertThisInitialized","e","target","indexOf","setState","array","j","Math","floor","random","temp","shuffleImages","components_Navbar","components_Title","components_ImageGrid","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e46ce31.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar(props) {\n  return (\n    <div className=\"nav-bar\">\n      <ul>\n        <li>\n          <a href=\"/\">Clicky Game</a>\n        </li>\n        <li>Click an image to begin!</li>\n        <li>\n          Score: {props.score} | Top Score: {props.topScore}\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\n\nfunction Title() {\n  return (\n    <div className=\"app-title\">\n      <h1>Clicky Game!</h1>\n      <h2>\n        Click on an image to earn points, but don't click on any more than once!\n      </h2>\n    </div>\n  );\n}\n\nexport default Title;\n","import React from \"react\";\n\nfunction Footer(props) {\n  return (\n    <div className=\"footer\">Clicky Game!</div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { Container, Row, Col, Image } from \"react-bootstrap\";\n\nclass ImageGrid extends React.Component {\n  createTable = (images, handleClick) => {\n    let containerChildren = [];\n    let rowChildren = [];\n    for (let i = 0; i < images.length; i++) {\n      rowChildren.push(\n        <Col key={i}>\n          <Image\n            onClick={handleClick}\n            width=\"200px\"\n            src={images[i]}\n            thumbnail\n          />\n        </Col>\n      );\n      if (i % 4 === 3 || images.length - 1 === i) {\n        containerChildren.push(<Row key={i}>{rowChildren}</Row>);\n        rowChildren = [];\n      }\n    }\n    return containerChildren;\n  };\n\n  render() {\n    return (\n        <Container>{this.createTable(this.props.images, this.props.handleClick)}</Container>\n    );\n  }\n}\n\nexport default ImageGrid;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Title from \"./components/Title\";\nimport Footer from \"./components/Footer\";\nimport ImageGrid from \"./components/ImageGrid\";\n\nconst images = [\n  \"/images/aladdin.jpeg\",\n  \"/images/alice.jpeg\",\n  \"/images/donald.png\",\n  \"/images/dory.jpeg\",\n  \"/images/dumbo.jpeg\",\n  \"/images/grumpy.jpeg\",\n  \"/images/anna.jpeg\",\n  \"/images/mickey.jpeg\",\n  \"/images/minnie.jpeg\",\n  \"/images/peter.jpeg\",\n  \"/images/stitch.jpeg\",\n  \"/images/winnie-the-pooh.jpeg\",\n  \"/images/marie.jpeg\",\n  \"/images/chip.jpeg\",\n  \"/images/jessie.jpeg\",\n  \"/images/jasmine.jpeg\"\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      topScore: 0,\n      clicked: []\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    const {\n      target: { src }\n    } = e;\n    const state = this.state;\n    if (state.clicked.indexOf(src) >= 0) {\n      state.clicked = [];\n      state.score = 0;\n    } else {\n      state.clicked.push(src);\n      state.score += 1;\n      if (state.score > state.topScore) {\n        state.topScore = state.score;\n      }\n    }\n    this.setState(state);\n  }\n\n  shuffleImages(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n\n  render() {\n    this.shuffleImages(images);\n    return (\n      <div className=\"app\">\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\n        <Title/>\n        <ImageGrid images={images} handleClick={this.handleClick}/>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// const $root = document.querySelector(\"#root\");\n\n// let score;\n// let targetScore;\n\n// const makeGuess = () => {\n//   const $score = document.querySelector(\"#root p\");\n//   $score.textContent = \"Score: \" + score + \" | \" + \"Target: \" + targetScore;\n\n//   if (score > targetScore) {\n//     alert(\"You lost this round!\");\n//     playRound();\n//   } else if (score === targetScore) {\n//     alert(\"You won this round!\");\n//     playRound();\n//   }\n// };\n\n// this.element.addEventListener(\n//     \"click\",\n//     () => {\n//       score += this.value;\n//       makeGuess();\n//     },\n//     false\n//   );\n\n// const playRound = () => {\n//     const fragment = document.createDocumentFragment();\n//     const $score = document.createElement(\"p\");\n//     targetScore = Math.floor(Math.random() * 50) + 25;\n//     score = 0;\n//     $score.textContent = \"Score: \" + score + \" | \" + \"Target: \" + targetScore;\n//     crystals\n//       .sort(() => 0.5 - Math.random())\n//       .forEach(crystal => crystal.render(fragment));\n//     fragment.appendChild($score);\n//     $root.innerHTML = \"\";\n//     $root.appendChild(fragment);\n//   };\n  \n//   playRound();\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}